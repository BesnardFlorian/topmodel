using System.Globalization;
using TopModel.Core.FileModel;
using TopModel.Core.Model.Implementation;
using YamlDotNet.Core;
using YamlDotNet.Core.Events;

namespace TopModel.Core.Loaders;

public class DomainLoader : ILoader<Domain>
{
    private readonly FileChecker _fileChecker;

    public DomainLoader(FileChecker fileChecker)
    {
        _fileChecker = fileChecker;
    }

    /// <inheritdoc cref="ILoader{T}.Load" />
    public Domain Load(Parser parser)
    {
        var domain = new Domain();

        parser.ConsumeMapping(() =>
        {
            var prop = parser.Consume<Scalar>().Value;
            parser.TryConsume<Scalar>(out var value);

            switch (prop)
            {
                case "name":
                    domain.Name = new LocatedString(value);
                    break;
                case "label":
                    domain.Label = value!.Value;
                    break;
                case "length":
                    domain.Length = Convert.ToInt32(decimal.Parse(value!.Value, CultureInfo.InvariantCulture));
                    break;
                case "scale":
                    domain.Scale = Convert.ToInt32(decimal.Parse(value!.Value, CultureInfo.InvariantCulture));
                    break;
                case "autoGeneratedValue":
                    domain.AutoGeneratedValue = value!.Value == "true";
                    break;
                case "bodyParam":
                    domain.BodyParam = value!.Value == "true";
                    break;
                case "asDomains":
                    parser.ConsumeMapping(() =>
                    {
                        domain.AsDomainReferences[parser.Consume<Scalar>().Value] = new DomainReference(parser.Consume<Scalar>());
                    });
                    break;
                case "mediaType":
                    domain.MediaType = value!.Value;
                    break;
                default:
                    domain.Implementations[prop] = _fileChecker.Deserialize<DomainImplementation>(parser);
                    break;
            }
        });

        return domain;
    }
}