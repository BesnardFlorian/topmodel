using TopModel.Core.FileModel;
using TopModel.Core.Types;
using TopModel.Utils;

namespace TopModel.Core;

public class Domain
{
#nullable disable
    public LocatedString Name { get; set; }

    public string Label { get; set; }

    // Liste des converter pour lesquels le converter est présent dans la liste des domains From
    public HashSet<Converter> ConvertersFrom { get; set; } = new HashSet<Converter>();

    public HashSet<Converter> ConvertersTo { get; set; } = new HashSet<Converter>();

#nullable enable

    public int? Length { get; set; }

    public int? Scale { get; set; }

    public bool AutoGeneratedValue { get; set; }

    public bool BodyParam { get; set; }

    public CSharpType? CSharp { get; set; }

    public TSType? TS { get; set; }

    public JavaType? Java { get; set; }

    public string? SqlType { get; set; }

    public string? MediaType { get; set; }

    public string CSharpName => Name.Replace("DO_", string.Empty).ToPascalCase();

    public bool ShouldQuoteSqlValue =>
        (SqlType ?? string.Empty).Contains("varchar")
        || SqlType == "text"
        || SqlType == "uniqueidentifier"
        || SqlType == "uuid"
        || (SqlType ?? string.Empty).Contains("date")
        || (SqlType ?? string.Empty).Contains("time")
        || CSharp?.Type == "string";

#nullable disable
    public ModelFile ModelFile { get; set; }

    internal Reference Location { get; set; }

    public override string ToString()
    {
        return Name;
    }
}