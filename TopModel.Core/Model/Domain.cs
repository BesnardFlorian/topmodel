using TopModel.Core.FileModel;
using TopModel.Core.Model.Implementation;
using TopModel.Utils;

namespace TopModel.Core;

public class Domain
{
#nullable disable
    public LocatedString Name { get; set; }

    public string Label { get; set; }

    // Liste des converter pour lesquels le converter est présent dans la liste des domains From
    public HashSet<Converter> ConvertersFrom { get; set; } = new HashSet<Converter>();

    public HashSet<Converter> ConvertersTo { get; set; } = new HashSet<Converter>();

#nullable enable

    public int? Length { get; set; }

    public int? Scale { get; set; }

    public bool AutoGeneratedValue { get; set; }

    public bool BodyParam { get; set; }

    public Dictionary<string, Domain> AsDomains { get; set; } = new();

    public Dictionary<string, DomainReference> AsDomainReferences { get; set; } = new();

    public Dictionary<string, DomainImplementation> Implementations { get; set; } = new();

    public string? MediaType { get; set; }

    public bool IsMultipart => MediaType == "multipart/form-data";

    public string CSharpName => Name.Replace("DO_", string.Empty).ToPascalCase(true);

#nullable disable
    public ModelFile ModelFile { get; set; }

    internal Reference Location { get; set; }

    public override string ToString()
    {
        return Name;
    }
}